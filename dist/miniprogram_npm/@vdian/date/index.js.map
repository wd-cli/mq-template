{"version":3,"sources":["index.js","date-helper/index.js","constants/index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar date_helper_1 = require(\"./date-helper\");\nvar dateHelper = new date_helper_1.default();\n/**\n * 解析时间，格式化符号有下列几种：\n *\n * yyyy : 四位数的年份。例如：2018\n *\n * yy   : 两位数的年份。例如：18\n *\n * MM   : 两位数月份，从 01 开始。01-12\n *\n * M    : 一位数月份，从 1 开始。1-12\n *\n * dd   : 两位天数。01-31\n *\n * d    : 一位天数。1-31\n *\n * HH   : 两位小时，24小时制。00-23\n *\n * H    : 一位小时，24小时制。0-23\n *\n * mm   : 两位分钟。00-59\n *\n * m    : 一位分钟。0-59\n *\n * ss   : 两位秒。00-59\n *\n * s    : 一位秒。0-59\n *\n * E    ：星期数。0-6，星期天是 0\n * @param input - 格式化的时间字符串\n * @param formatText - 格式化符号\n * @returns 日期对象\n */\nfunction parse(input, formatText) {\n    return dateHelper.parse(input, formatText);\n}\nexports.parse = parse;\n/**\n * 格式化时间，格式化符号有下列几种：\n *\n * yyyy : 四位数的年份。例如：2018\n *\n * yy   : 两位数的年份。例如：18\n *\n * MM   : 两位数月份，从 01 开始。01-12\n *\n * M    : 一位数月份，从 1 开始。1-12\n *\n * dd   : 两位天数。01-31\n *\n * d    : 一位天数。1-31\n *\n * HH   : 两位小时，24小时制。00-23\n *\n * H    : 一位小时，24小时制。0-23\n *\n * mm   : 两位分钟。00-59\n *\n * m    : 一位分钟。0-59\n *\n * ss   : 两位秒。00-59\n *\n * s    : 一位秒。0-59\n *\n * E    ：星期数。0-6，星期天是 0\n * @param date - 日期对象\n * @param formatText - 格式化符号\n * @returns 格式化的时间字符串\n */\nfunction format(date, formatText) {\n    return dateHelper.format(date, formatText);\n}\nexports.format = format;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../constants\");\nfunction formatNumberParts(numberParts) {\n    return numberParts.map(function (i) { return Number(i); });\n}\n// 通过需要匹配的字符串，创建正则表达式，对元字符进行转义\nfunction regexEscape(regText) {\n    return regText.replace(constants_1.REGEX_SPECIAL_CHARACTER, '\\\\$&');\n}\n// 把年份最后两位变成0\nvar get2Year = function (date) {\n    return Number((date.getFullYear() + '').replace(/\\d{2}$/, '00'));\n};\n// 一位数字变成两位数字左补0\nvar get2 = function (value) { return (value < 10 ? '0' + value : value + ''); };\n// 获取相对应的日期相关数据\nvar getValueByPattern = function (fmt, date) {\n    var patterns = {\n        yy: (date.getFullYear() + '').slice(-2),\n        yyyy: date.getFullYear(),\n        M: date.getMonth() + 1,\n        MM: get2(date.getMonth() + 1),\n        d: date.getDate(),\n        dd: get2(date.getDate()),\n        H: date.getHours(),\n        HH: get2(date.getHours()),\n        m: date.getMinutes(),\n        mm: get2(date.getMinutes()),\n        s: date.getSeconds(),\n        ss: get2(date.getSeconds()),\n        E: date.getDay()\n    };\n    return patterns[fmt];\n};\n// 解析时间中间数据\nvar getParseInfo = function (input, format) {\n    var regexpText = regexEscape(format);\n    var index = 0;\n    var result = {\n        tokenMap: {},\n        numberParts: [],\n        errorFlag: false\n    };\n    // 记录格式化符号在捕获组中的索引\n    regexpText = regexpText.replace(constants_1.PARSE_TOKEN, function (token) {\n        result.tokenMap[token] = index++;\n        return constants_1.TOKEN_REGEX_MAP[token];\n    });\n    regexpText = \"^\" + regexpText + \"$\";\n    // 获取捕获组 存入numberParts\n    var match = input.match(new RegExp(regexpText)) || [];\n    if (match.length === 0) {\n        result.errorFlag = true;\n    }\n    else {\n        match.shift();\n        result.numberParts = match.slice();\n    }\n    return result;\n};\n/**\n * DateHelper 类\n */\nvar DateHelper = /** @class */ (function () {\n    function DateHelper() {\n    }\n    /**\n     * 格式化时间\n     * @remarks\n     * 格式化符号有下列几种\n     * yyyy : 四位数的年份。例如：2018\n     * yy   : 两位数的年份。例如：18\n     * MM   : 两位数月份，从 01 开始。01-12\n     * M    : 一位数月份，从 1 开始。1-12\n     * dd   : 两位天数。01-31\n     * d    : 一位天数。1-31\n     * HH   : 两位小时，24小时制。00-23\n     * H    : 一位小时，24小时制。0-23\n     * mm   : 两位分钟。00-59\n     * m    : 一位分钟。0-59\n     * ss   : 两位秒。00-59\n     * s    : 一位秒。0-59\n     * E    ：星期数。0-6，星期天是 0\n     * @param date - 日期对象\n     * @param format\n     * @returns 格式化的时间字符串\n     */\n    DateHelper.prototype.format = function (date, format) {\n        if (!(date instanceof Date)) {\n            return '';\n        }\n        format = format || constants_1.DEFAULT_FORMAT;\n        format = format.replace(constants_1.FORMAT_TOKEN, function (part) { return getValueByPattern(part, date) + ''; });\n        return format;\n    };\n    /**\n     * 解析时间\n     * @remarks\n     * 格式化符号有下列几种\n     * yyyy : 四位数的年份。例如：2018\n     * yy   : 两位数的年份。例如：18\n     * MM   : 两位数月份，从 01 开始。01-12\n     * M    : 一位数月份，从 1 开始。1-12\n     * dd   : 两位天数。01-31\n     * d    : 一位天数。1-31\n     * HH   : 两位小时，24小时制。00-23\n     * H    : 一位小时，24小时制。0-23\n     * mm   : 两位分钟。00-59\n     * m    : 一位分钟。0-59\n     * ss   : 两位秒。00-59\n     * s    : 一位秒。0-59\n     * @param input - 格式化的时间字符串\n     * @param format\n     * @returns 日期对象\n     */\n    DateHelper.prototype.parse = function (input, format) {\n        if (!input || !format) {\n            return new Date(NaN);\n        }\n        if (typeof input !== 'string' || typeof format !== 'string') {\n            return new Date(NaN);\n        }\n        var parseInfo = getParseInfo(input, format);\n        if (parseInfo.errorFlag) {\n            return new Date(NaN);\n        }\n        // 例如 ['2018','12','25']\n        var matchParts = parseInfo.numberParts;\n        // 例如{yyyy:0,MM:1,dd:2} yyyy对应的年在matchParts中的索引是0\n        var fmt = parseInfo.tokenMap;\n        // 变成数字数组 用于 new Date 方法\n        var parts = formatNumberParts(matchParts);\n        var year = parts[fmt.yyyy] || parts[fmt.yy] || constants_1.DEFAULT_YEAR;\n        if (matchParts[fmt.yy]) {\n            year += get2Year(new Date());\n        }\n        var month = (parts[fmt.MM] || parts[fmt.M] || constants_1.DEFAULT_MONTH) - 1;\n        var date = parts[fmt.dd] || parts[fmt.d] || constants_1.DEFAULT_DATE;\n        var hour = parts[fmt.HH] || parts[fmt.H] || constants_1.DEFAULT_HOUR;\n        var minute = parts[fmt.mm] || parts[fmt.m] || constants_1.DEFAULT_MINUTE;\n        var second = parts[fmt.ss] || parts[fmt.s] || constants_1.DEFAULT_SECOND;\n        return new Date(year, month, date, hour, minute, second);\n    };\n    return DateHelper;\n}());\nexports.default = DateHelper;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// 根据符号匹配对应年月日时分秒的数字,通过构造函数实例化正则表达式\nexports.TOKEN_REGEX_MAP = {\n    yy: '(\\\\d{2})',\n    yyyy: '(\\\\d{4})',\n    M: '((?:1[0-2])|[1-9])',\n    MM: '((?:0[1-9])|(?:1[0-2]))',\n    d: '((?:[1-2]\\\\d)|(?:3[0-1])|[1-9])',\n    dd: '((?:0[1-9])|(?:[1-2]\\\\d)|(?:3[0-1]))',\n    H: '((?:1\\\\d)|(?:2[0-3])|\\\\d)',\n    HH: '((?:[0-1]\\\\d)|(?:2[0-3]))',\n    m: '((?:[1-5]\\\\d)|\\\\d)',\n    mm: '([0-5]\\\\d)',\n    s: '((?:[1-5]\\\\d)|\\\\d)',\n    ss: '([0-5]\\\\d)'\n};\n// 匹配一个正则表达式中的元字符\nexports.REGEX_SPECIAL_CHARACTER = /[-\\/\\\\^$*+?.()|[\\]{}]/g;\n// 匹配一个用来解析时间的格式化符号\nexports.PARSE_TOKEN = /yyyy|yy|MM|M|dd|d|HH|H|mm|m|ss|s/g;\n// 匹配一个用来格式化时间的格式化符号\nexports.FORMAT_TOKEN = /yyyy|yy|MM|M|dd|d|HH|H|mm|m|ss|s|E/g;\n// 格式化日期时 默认的格式化参数\nexports.DEFAULT_FORMAT = 'yyyy-MM-dd';\n// 解析时间时，默认的年\nexports.DEFAULT_YEAR = 0;\n// 解析时间时，默认的月\nexports.DEFAULT_MONTH = 1;\n// 解析时间时，默认的日\nexports.DEFAULT_DATE = 1;\n// 解析时间时，默认的时\nexports.DEFAULT_HOUR = 0;\n// 解析时间时，默认的分\nexports.DEFAULT_MINUTE = 0;\n// 解析时间时，默认的秒\nexports.DEFAULT_SECOND = 0;\n"]}